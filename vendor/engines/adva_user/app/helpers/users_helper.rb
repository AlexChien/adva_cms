module UsersHelper
  # Includes a javascript include tag that will require a javascript snippet
  # generated by the RolesController. This snippet will contain roles data
  # for the current user and toggle visibility for authorized elements.
  def authorize_elements(object = nil)
    return unless current_user
    source = %W(/users/#{current_user.id})
    source << "/#{object.class.name.downcase.pluralize}/#{object.id}" if object
    source << '/roles.js'
    javascript_include_tag source.join
  end
  
  def authorized_link_to(text, url, options)
    add_authorizing_css_classes! options
    link_to text, url, options
  end
  
  # Adds the css class required-roles as well as a couple of css classes that
  # can be matched with the current user's roles in order to toggle the visibility
  # of an element
  def add_authorizing_css_classes!(options)
    object = options.delete(:update) || options.delete(:delete) # TODO
    roles = object.role_authorizing(:update).expand
    options[:class] = 'requires-role ' + roles.map(&:to_css_class).join(' ')
  end
  
  def authorizing_css_classes(roles, options = {})
    separator = options[:separator] || ''
    quote = options[:quote]
    roles.map(&:to_css_class).map{|role| quote ? "'#{role}'" : role }.join(separator)
  end
  
  def who(name)
    name = name.name if name.is_a? User
    return current_user.name == name ? "You" : name
  end

  def gravatar_img(user, options = {})
    image_tag gravatar_url_for(user.email), {:class => 'avatar'}.merge(options)
  end
  
  def gravatar_url_for(email, size = 80)
    default = '/images/avatar.gif'
    return default if email.blank?
    require 'digest/md5'
    digest = Digest::MD5.hexdigest(email)
    "http://www.gravatar.com/avatar.php?size=#{size}&gravatar_id=#{digest}&default=http://#{request.host_with_port}#{ActionController::AbstractRequest.relative_url_root}/images/avatar.gif"
  end
end