# Configurable Cells

some use cases:

	MenuCell can be placed by the developer:

		content_for(:sidebar) { MenuCell.instance(:"admin/main").render }

	MenuCell instance :"admin/main" can be configured by the developer (code):

		menu[:"admin/menu_main"]
			menuitem[:overview]
			menu[:admin]
				menuitem[:themes]
				menuitem[:settings]

	MenuCell instance :"admin/main" configuration can be extended by the developer (code):

		Cell.instance(:"admin/menu_main").items(:admin).add :newsletters
	

	SectionMenuCell instance :menu_top can be configured by the user (db):

		# displays all sections starting at level 2 except the section with id 11
		cell.start_level = 2
		cell.exclude_sections = [11]

	RecentArticlesCell instance #1 can be configured by the user (db):
	
		cell.section = 1
		cell.include_children = false

	layouts/admin:
		<%= yield :header %>
		
	BaseController:
		before_filter :render_cells
		
		# could have something like this and populate an ordered hash
		content_for(:header,  :except => lambda { |c| c.controller_path == 'admin/sites' or c.action.in?(:index, :new) }) do
			Cell.instance('admin/menu_main').render
		end
		
		# these could use content_for then
		renders_cell 'admin/menu_main', :to => :header, 
		                                :except => { :controller => 'admin/sites', :action => [:index, :new] }
		renders_cell 'admin/menu_user', :to => :header
		renders_cell 'breadcrumbs',     :to => :header

some api ideas:

	class RecentArticlesCell
		property :section_id, :type => :integer, :required => true
		property :include_children, :type => :boolean, :default => false
	
		def self.instance(name)
			# returns an existing or new instance
		end
	end

	class Controller
		def cell(type, name)
			# gotta scope by site.id if config is looked up from db
		end
	end

	class Cell::Menu < Cell
	end

	# initializers/cells.rb
	Cell.define "admin/menu_main", :type => Cell::Menu
	menu = Cell.instance "admin/menu_main"
	menu.add_item 'overview', :url => lambda { ... }
	menu.add_item 'assets',   :url => lambda { ... }
	menu.add_menu 'sections', :populator => lambda { ... } # when a populator is given it populates the menu
	menu.add_menu 'settings', :url => lambda { ... }       # when an url is given, submenu item has a link

	Cell.define :breadcrumbs




------------------------------------------------------------------------------

1. ActiveForm http://activeform.rubyforge.org/
2. Formtastic http://github.com/justinfrench/formtastic/tree/master
3. SemanticFormBuilder http://github.com/rubypond/semantic_form_builder/tree/master
4. AccessibleFormBuilder http://github.com/shift/accessible_form_builder/tree/master
5. ClassyForms http://github.com/sbfaulkner/classy_forms/tree/master

http://github.com/sprsquish/conditions_fu/tree/master
http://sprawsm.com/uni-form/

FormBuilder.for(klass) looks for form builders defined for the klass, any of its
parent classes or a default base form builder. So FormBuilder.for(Article) will
look for:

- FormBuilder::Article
- FormBuilder::Content
- FormBuilder::Base

in this order and returns the first one that is defined.

This evaluates the given block before the :button section is evaluated:

FormBuilder.for(Article).before(:buttons) do |form|
	form.input :meta_keywords
	form.input :meta_description
end

This registers a block for a certain placeholder that would be evaluated when 
form.buttons is called. The default form builder might define default blocks 
that could be overwritten:

FormBuilder.for(Article).define(:buttons) do |form|
	form.commit_button :save
	form.cancel_button
end

------------------------------------------------------------------------------

http://pastie.org/private/brjpbkyvh4ubgnpum01dxq
http://www.sitepoint.com/blogs/2006/03/03/us-ascii-transliterations-of-unicode-text/
http://search.cpan.org/~sburke/Text-Unidecode-0.04/lib/Text/Unidecode.pm
http://pivotallabs.com/users/cheister/blog/articles/603-unicode-transliteration-to-ascii
http://rubyforge.org/projects/unidecode/
http://www.jroller.com/obie/entry/fix_that_tranny_add_to
http://github.com/phorsfall/salty_slugs/tree/master

------------------------------------------------------------------------------

<component name="blog/recent_articles" section_id="1" count="10" />
<component name="user/recent_users" section_id="1" count="10" />

------------------------------------------------------------------------------


adva_cms/lib/time_hacks.rb -- i18nize or replace with localize
adva_cms/helpers/base_helper -- date stuff
adva_cms/helpers/cached_pages_helper.rb -- i18nize
adva_cms/helpers/content_helper.rb -- link_to_content_comments
adva_cms Type, does this have to be localized? see: models/section.rb:66 and line 57

$ grep -R "\Wt('"  *
engines/adva_cms/app/views/admin/articles/index.html.erb:    <%= t('adva.articles.total_with_count', :count => @articles.total_entries) %>
engines/adva_cms/app/views/admin/cached_pages/index.html.erb:    <%= t('adva.cached_pages.total_with_count', :count => @cached_pages.total_entries) %>
engines/adva_cms/app/views/admin/categories/index.html.erb:    <%= t('adva.categories.total_with_count', :count => @categories.total_entries) %>
engines/adva_user/app/views/password_mailer/reset_password_email.html.erb:<%= t('adva.passwords.notifications.reset_password.body', :name => @user.name, :link => @reset_link) %>
engines/adva_user/app/views/password_mailer/updated_password_email.html.erb:<%= t('adva.passwords.notifications.password_updated.body', :name => @user.name) %>
engines/adva_user/app/views/user_mailer/signup_verification_email.html.erb:<%= t('adva.signup.notifications.email_verification.body', :name => @user.name, :link => @verification_url) %>


* add roles interface
* remove observers and make behaviour more explicit by using events/listeners?
  e.g. page caching
* redesign/abstract adva_activity
* redesign rbac to work with arbitrary group memberships


- fix taborder (e.g. user profile)
- categories list layout
- background shadow bug
- site settings: spam form layout


- profile area ?
- addings sections ?
- after adding/editing article should it link to article overview ?


- themes list
- site user details layout and sidebar
- sections settings not perfect



# recent activity (site/show): displays all site-users and superusers

# navigation + subnav
  make buttons highlight active state
  
# generate breadcrumbs

# fix /admin/users/1



