[fix] routes for pagination are missing
[fix] split up javascript/admin.js in smaller files
[fix] separate login and admin/login pages (same thing, different layout)
[fix] changes to theme assets do not sweep the cached files in public/
[fix] changes to theme template files need to sweep some kind of template file cache in production?
[fix] error message details on account/new are missing (render_with_error_proc?)
[fix] acts_as_list is only used in Asset. can we remove that?
[fix] currently broken: belongs_to_author: with_deleted => true
[fix] js'ify all dates and use js date format
[fix] rename redirect_to param to return_to (it's also used in cancel links etc.)
[fix] rename articles_per_page to per_page so it makes sense for comments and stuff
      also ensure that it can't equal 0

[feature] [content] pipe all filtered columns through whitelist sanitizer
[feature] [wiki] implement wikipage admin area (analog to articles area)
[feature] [wiki] add various filters to admin wikipage list (like on admin articles list)
[feature] [wiki] make the 'home' wikipage permalink configurable per wiki
[feature] [comments] add various filters to admin comments list (like on admin articles list)
[feature] [comments] after a comment was posted, display it on a comments/show page with messages and a form to edit it
[feature] [comments] allow anonymous comment editing for a couple of minutes based on the cookie
[fix] [comments] comments_count gets cached, need approved_comments_count
[fix] [wiki] force username present on wikipage save

[fix] Sections routing filter uses Section.find_by_host_and_path. Should probably be replace
      with Site.find_by_host and the @site.sections?
[fix] same with Category.find_all_by_host?
      
[fix] is the Content.state attribute actually used somewhere? (not the method, the attribute)


[plugin] pingback plugin
[plugin] comment email notification
[major] add spam protection for comments and wikipages (look at viking + multiengine branch)
[major] implement search

[feature] add before_move and after_move hooks to better_nested_set
[feature] make cacheable_flash behave completely transparent (i.e. do not clear flash after writing it to the cookie)
          rational: controller specs should work and controllers behave correctly
          not matter if the plugin is installed or not

[fix] wiki categories aren't that common. should be available, but probably not by default.
      possible solution: have a section setting "manage categories for this section"? that would 
      even allow to manage categories per Section, but requires to explicitely turn it on.

[feature] admin section: have an activity center/dashboard where engines can register their
          widgets (partials) to. e.g.: "x comments are awaiting your approval",
          "Please change your administrator password!" etc.


[theme] default theme: increase font size by 1px
[theme] microformat everything: hcard, hatom


# broken + missing specs

[specs] User#has_role? and User#has_exact_role?
[specs] spec widgets
[specs] add specs for helper methods stubbed in view specs
[specs] spec and implement admin/wikipage section
[specs] spec remaining helpers
[specs] spec remaining views + partials
[specs] implement themes + theme_file specs
[specs] implement assets specs
[specs] spec registration, login, authentication
[specs] integration/stories
[specs] spec usage of xss_terminate in one place (so that one can easily 
        see which attributes get filtered and which don't)
[specs] controllers: spec various error conditions like record not found
[specs] controllers: simplify specs by circumventing the routing filters
        (i.e. use paths like they would be recognized when no filters are
        being used)

# resources
viking http://github.com/technoweenie/viking/tree/master
defensio http://blog.teksol.info/2008/3/4/mephisto-defensio-refactored-to-patterns
authentication http://authentication.rubyforge.org/

------------------------------------------------------------------------------

# JS Rbac layer

In order to display links only to authorized users while still page_caching
most frontend pages, we need to implement a role/permission-based layer in
javascript.

We can have three tiers:

1. In the HTML we encode required roles as CSS classes. A link to a comment's
edit page that requires the user to be at least the author of the comment could
look like this:

<a class="requires-role site-1-admin section-1-moderator comment-1-author">edit</a>

A link to a wikipage's edit page that requires a user to be logged in could be:

<a class="requires-role user">edit</a>

(And a link to a wikipage's edit page that does not require any authorization
would obviously just omit the requires-role class.)

By explicitely listing the possible roles we avoid implementing a role 
hierarchie in the JS layer so the system stays better decoupled.

2. The CSS class .requires hides the link and triggers a JS function that
looks up roles for the user and re-displays the link if any of them matches
one of the other CSS classes.

3. The JS layer calls our application and fetches a JSON document that grants
certain roles to the user for the current site, section and other objects. The
JSON documents can probably also be page cached and only sweeped when the user's
roles change.

We can easily retrieve the superuser, admin and moderator roles for the whole
site and all sections. 

The only thing that bothers me is how to sanely check for authorships. People
can easily pile up hundreds of forum posts so it would not make sense to send
them all at once. In the case of the forum it seems sane to request and send
authorships per topic instead.

So, the backend URLs could look like this:

/users/1/roles/          # site-1-admin, section-1-moderator
/users/1/roles/topic/1   # site-1-admin, section-1-moderator, post-1-author, post-2-author, post-3-author, ...

The JS layer would just compare the classes present on the page to the values
returned from the backend and display the links that match (or whatever else).

The view would access a helper that returns the role-keys that authorize to
perform a certain action. E.g. possible_roles_for(:manage_wikipages, @wiki) or
better: possible_roles_for(:edit, @wikipage)

The roles backend service would list all roles that the user has for the given
object. Like current_user.roles_for(@site) or current_user.roles_for(@topic),
or rather: @site.relevant_roles(current_user) and @topic.relevant_roles(current_user)




# users

[feature] ajax users online feature?
[feature] have a config option to allow users to register for all sites or per site (?)

# forum

    recent posts list
    feeds
    
    hot topics
    topic activity since last visit
    hits ?
    
    abstract out a javascript api for roles/permissions:
      show a form when user is not logged in, show an edit link when user has permission to edit
      should work without requesting permission data with each request, right?
      http://pivots.pivotallabs.com/users/nick/blog/articles/272-access-control-permissions-in-rails
      http://hobocentral.net/
    same with recent topics:
      highlight topics that have changed since the user read them last

    monitorship for forum topics, wikipages, blog articles etc.
    moderatorships => role :moderator

    add a description and description_html to sections?
    list forum moderators?
    
    refactor to user commands (e.g. current_user.reply) that check permissions
      and then delegate the command to the target model? (e.g. topic.reply) ?

    this is what tentacle does:
    create_table "monitorships", :force => true do |t|
      t.integer  "profile_id"
      t.integer  "topic_id"
      t.boolean  "active",     :default => true
      t.timestamps
    end
    
    generally: breadcrumbs

    validation on has_many :through join tables:
      def uniqueness_of_relationship
        if self.class.exists?(:profile_id => profile_id, :topic_id => topic_id, :active => true)
          errors.add_to_base("Cannot add duplicate profile/topic relation")
        end
      end

# activity

[fix] deactivate activity tracking for associated objects when section, article etc. is deleted (?)
[feature] observe user registration, deactivation ....
[feature] observe section, category, asset creation etc.

# general

[enhance] how to move observer config from environment.rb to init.rb?

# sections

[feature] settings: select box for section-specific templates and layouts
[enhance] have section types register from engines to Section.types

# themes

[feature] make ActionMailer themeable
[enhance] decouple admin interface through using a themeable instead of site
[feature] add drop-in erb- and haml-safemode support, make public controllers use safemode
[feature] use caches_page_with_references or just expire the whole cache dir
[feature] clone pre-installed themes
[enhance] make theme.files.find work without globbing all files
[major] add liquid layer (drops + helpers) (?) » add an ActionView Liquid template handler?
[major] port a simple liquid theme and test it with drops (?)

# content

[major] add attachments for wikipages (are they also in beast?)

# enhancements

[enhance] checkout http://code.bitsweat.net/svn/redirect_back
[enhance] checkout http://code.bitsweat.net/svn/implicit_respond_to


# CacheableFlash

  after_filter won't be called when the filter chain is halted. maybe an 
  around_filter is a better choice?
  
  after_filter :write_flash_to_cookie

# Rails 

Role::Admin.new :object => nil seems to run into SystemStackError with:
  class Role belongs_to :object, :polymorphic => true
  class Role::Admin < Role

force certain after_filters to be run even if the filter chain has been halted:
    :after_filter => :bla, :force => true

section.articles.maximum(:position) returns nil when table is empty. shouldn't that be 0?

ActionController::Base#layout can't be restricted to certain formats, can it? (see BlogController + feeds)

section.radio_button :type, type (and other helpers) should create an id="section_type_blog"
even when the section is a blog (i.e. that's an STI related bug)

wikipage routing/controller: change :id to :permalink ... doesn't seem to work with resources
    http://dev.rubyonrails.org/ticket/6814 => wontfix
    http://archive.jvoorhis.com/articles/2006/08/01/announcing-resource_hacks => seems to break url_helpers
    def to_param
      "#{username.gsub(/[^a-z0-9]+/i, '-')}" if self.username
    end

# rspec

[patch] changed to following. ask for a patch:
    Spec::Rails::Example::ControllerExampleGroup.class_eval do
      def params_from(method, path, env = {})
        ensure_that_routes_are_loaded
        env.merge!({:method => method})
        ActionController::Routing::Routes.recognize_path(path, env)
      end
    end    
    

RESOURCES --------------------------------------------------------------------

Themes
    http://quotedprintable.com/pages/scribbish
    http://mad.ly/about/
    http://powazek.com/posts/516
    http://powazek.com/depo-skinny
    http://warpspire.com/hemingway/
    http://wordpress.org/
    http://www.bestwpthemes.com/
    http://railsgrunt.com/
    
Research other CMS features
    wordpress
    movable type
    http://railfrog.com/
    http://slateinfo.blogs.wvu.edu    
    http://opensource.bitscribe.net/page/Bitswiki (wiki)
    http://almosteffortless.com/eldorado/ (forum)
    http://www.rubyinside.com/community-engine-rails-plugin-that-adds-social-networking-to-your-app-901.html


http://somerandomdude.net/srd-projects/bitcons/
http://somerandomdude.net/srd-projects/clearbits



NOTES ------------------------------------------------------------------------

check http://ultraviolet.rubyforge.org/
try http://rubymatt.rubyforge.org/mailtrap/ for mail-related dev
try Google Syntax Highlighter ?



# Sanitizing input

contact xss_terminate developer regarding improvements/refactorings

http://code.google.com/p/xssterminate/
http://actsassanitized.devjavu.com/browser/lib/acts_as_sanitized.rb

http://code.google.com/p/sanitizeparams/
http://safe-erb.rubyforge.org/svn/plugins/safe_erb/
http://code.google.com/p/xss-shield/

http://www.ruby-forum.com/topic/133285
http://blog.thinkrelevance.com/2008/1/17/never-untaint
http://blog.thinkrelevance.com/2008/1/9/is-your-rails-app-xss-safe


# Dependency/reloading issues collect

User(#34074500) expected, got User(#13312670)

